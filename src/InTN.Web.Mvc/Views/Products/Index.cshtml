@using InTN.Web.Startup
@using InTN.Products.Dto
@using InTN.Web.Models.Products

@{
    ViewBag.Title = L("Products");
    ViewBag.CurrentPageName = PageNames.Products;
}

@section scripts
{
    <environment names="Development">
        <script src="~/view-resources/Views/Products/Index.js" asp-append-version="true"></script>
        
    </environment>

    <environment names="Staging,Production">
        <script src="~/view-resources/Views/Products/Index.min.js" asp-append-version="true"></script>
        
    </environment>

    <script>
        let addedProperties = {}; // { [propertyId]: { name: string, values: [] } }

        function renderPropertyInput(propertyId, propertyName) {
            const id = `property-${propertyId}`;
            const html = `
                <div class="card card-default mb-2" id="${id}">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>${propertyName}</span>
                        <button class="btn btn-danger btn-sm remove-property-btn" data-id="${propertyId}">Xoá</button>
                    </div>
                    <div class="card-body">
                        <div class="form-inline mb-2">
                            <input type="text" class="form-control mr-2 value-input" placeholder="Nhập giá trị..." />
                            <button type="button" class="btn btn-info btn-sm add-value-btn" data-id="${propertyId}">Thêm giá trị</button>
                        </div>
                        <div class="value-list" data-id="${propertyId}">
                            <!-- danh sách giá trị -->
                        </div>
                    </div>
                </div>`;
            $('#property-values-container').append(html);
        }

        function updateCombinationTable() {
            const props = Object.values(addedProperties);
            if (props.length === 0) {
                $('#combination-table-header').empty();
                $('#combination-table-body').empty();
                return;
            }

            // Tổ hợp Cartesian
            const cartesian = (arrays) => arrays.reduce((a, b) => a.flatMap(d => b.map(e => d.concat(e))), [[]]);

            const combinations = cartesian(props.map(p => p.values.map(v => ({ propId: p.id, propName: p.name, value: v }))));

            // Header
            let headerHtml = '';
            props.forEach(p => headerHtml += `<th>${p.name}</th>`);
            headerHtml += '<th>Giá bán</th>';
            $('#combination-table-header').html(headerHtml);

            // Body
            let bodyHtml = '';
            combinations.forEach((combo, index) => {
                let row = '<tr>';
                combo.forEach(c => row += `<td>${c.value}</td>`);
                row += `<td><input type="number" class="form-control price-input" data-combo='${JSON.stringify(combo)}' /></td>`;
                row += '</tr>';
                bodyHtml += row;
            });

            $('#combination-table-body').html(bodyHtml);
        }

        $(function () {
            $('#add-property-btn').click(function () {
                debugger;
                const selected = $('#property-select').val();
                const name = $('#property-select option:selected').data('name');
                if (!selected || addedProperties[selected]) return;

                addedProperties[selected] = { id: selected, name: name, values: [] };
                $(`#property-select option[value="${selected}"]`).hide();
                renderPropertyInput(selected, name);
            });

            $('#property-values-container').on('click', '.add-value-btn', function () {
                const propId = $(this).data('id');
                const input = $(this).siblings('.value-input');
                const value = input.val().trim();
                if (!value || addedProperties[propId].values.includes(value)) return;

                addedProperties[propId].values.push(value);
                const tag = `<span class="badge badge-secondary mr-1">${value} <i class="fa fa-times remove-value" style="cursor:pointer" data-id="${propId}" data-value="${value}"></i></span>`;
                $(`.value-list[data-id="${propId}"]`).append(tag);
                input.val('');
                updateCombinationTable();
            });

            $('#property-values-container').on('click', '.remove-value', function () {
                const propId = $(this).data('id');
                const value = $(this).data('value');
                addedProperties[propId].values = addedProperties[propId].values.filter(v => v !== value);
                $(this).parent().remove();
                updateCombinationTable();
            });

            $('#property-values-container').on('click', '.remove-property-btn', function () {
                const propId = $(this).data('id');
                delete addedProperties[propId];
                $(`#property-${propId}`).remove();
                $(`#property-select option[value="${propId}"]`).show();
                updateCombinationTable();
            });

            $('#save-combination-btn').click(function () {
                const result = [];

                $('#combination-table-body tr').each(function () {
                    const inputs = $(this).find('.price-input');
                    if (inputs.length > 0) {
                        const price = parseFloat(inputs.val()) || 0;
                        const combo = JSON.parse(inputs.attr('data-combo'));
                        result.push({
                            Combination: combo.map(c => ({ PropertyId: c.propId, PropertyName: c.propName, Value: c.value })),
                            Price: price
                        });
                    }
                });

                $('#PriceCombination').val(JSON.stringify(result));
                abp.message.success('Dữ liệu đã được lưu vào JSON, bạn có thể gửi lên server.');
            });
        });
    </script>
}

@model ProductIndexModel

<section class="content-header">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1>@L("Products")</h1>
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-md-12">
                                @await Html.PartialAsync("~/Views/Products/Index.AdvancedSearch.cshtml", Model)
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table id="ProductsTable" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>@L("STT")</th>
                                        <th>@L("Code")</th>
                                        <th>@L("Name")</th>
                                        <th>@L("Price")</th>
                                        <th>@L("Cost")</th>
                                        <th>@L("Unit")</th>
                                        <th>@L("Description")</th>
                                        <th>@L("InvoiceNote")</th>
                                        <th>@L("Supplier")</th>
                                        <th>@L("ProductType")</th>
                                        <th>@L("ProductCategory")</th>
                                        <th>@L("Status")</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@await Html.PartialAsync("~/Views/Products/_CreateModal.cshtml", new ProductCreateModel()
{
    Brands = Model.Brands,
    ProductCategories = Model.ProductCategories,
    ProductTypes = Model.ProductTypes,
    Suppliers = Model.Suppliers,
    Dto = new CreateProductDto()
});

<div class="modal fade" id="ProductEditModal" tabindex="-1" role="dialog" aria-labelledby="ProductEditModalLabel" data-backdrop="static">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content"></div>
    </div>
</div>

<div class="modal fade" id="ProductEditPriceModal" tabindex="-1" role="dialog" aria-labelledby="ProductEditPriceModalLabel" data-backdrop="static">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content"></div>
    </div>
</div>


 